gtype GList;
gtype GHashTable;

package demo {

    genum AnimalCatg {

        code BIRD { value: 101; }
        code MAMMAL;

    }
    
    gobject Position {
    
    	attribute lon { type: double; visibility: public; }
    	attribute lat { type: double; visibility: public; }
    
    }

    ginterface FlyingAnimal {
    
    	prefix flya;

        method fly {}
        method do_something {
        	result { type: boolean; }
        	parameter command_name { type: string; modifiers: const; }
        }
        
        signal landed {
        	parameter position { type: Position; }
        }

    }
    
    gflags ActionFlags {
    	code FORCE;
    	code ASYNC;
    }
    
    gerror ActionError {
    	code NOT_FOUND;
    	code FAILED;
    }
    
    ginterface Actor {
    
    	method do_something { 
    		parameter duration { type: integer; }
    	}
    	
	}

	genum BirdCategory {
	
		code ONE { value: 100; }
		code TWO;
	
	}

    gobject Bird {

        super Animal;
        implements demo::FlyingAnimal;
        implements demo::Actor;
        
        property bird_category {
        
        	description: "bird's category";
        	type: enumeration;
        	gtype: gtypename(BirdCategory);
        	access: read-only;
        	default: BirdCategory.ONE;
        
        }

        property weight {
        	description: "weight in kg";
            type: double;
            access: initial-write;
            default: "90.0";
            auto_create;
        }
        
        property dummy { 
        	access: read-only; 
        	default: "I am a \"string\"";
        	}
        	
        property mother {
        	description: "bird's mother";
        	type: object;
        	gtype: gtypename(Bird);
        }
        	
        constructor {

            init_properties {
                category: AnimalCatg.BIRD;
            }

            parameter weight {
                type: double;
                bind_property: weight;
            }

        }
        
        method talk {
            visibility: public;
            inheritance: virtual;
            parameter message { type: string; modifiers: const; }
            parameter language_code { type: unsigned integer; }
        }
        
        signal say-hello {}

        signal started {
            parameter dest { type: string; }
            parameter user_data { type: pointer; }
        }

        signal direction-changed {
            parameter old { type: double; }
            parameter new { type: double; }
            parameter user_data { type: pointer; }
        }
        
        override eat;

        method breed { visibility: public; }

        method do_something_protected { visibility: protected; }
        
        method do_private_stuff { 
        	parameter name { type: string; modifiers: const; }
        }

        attribute num_instances { type: integer; scope: static; }
        attribute name { type: string; visibility: public; }
        attribute color { type: unsigned integer; visibility: protected; }

    }

    gobject Animal {

        abstract;

        property category {
            type: enumeration;
            gtype: gtypename( AnimalCatg );
            access: initial-write;
        }

        method eat { inheritance: abstract; }

    }

}